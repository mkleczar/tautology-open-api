openapi: 3.0.0

info:
  version: '1'
  title: Tautology web API

paths:

  /parameters:
    post:
      tags:
        - tautology
      summary: specify required parameters for passed expression
      operationId: parameters
      requestBody:
        description: request must contain expression
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParametersRequest'
      responses:
        200:
          description: required expression parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParametersResponse'

  /validate:
    post:
      tags:
        - tautology
      summary: validates passed expression against variable values
      operationId: validate
      requestBody:
        description: request must contain expression and parameters value
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidationRequest'
      responses:
        200:
          description: validation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'

  /time:
    get:
      tags:
        - test
      summary: return system time
      operationId: time
      responses:
        200:
          description: current time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeResponse'
  /echo/{text}:
    get:
      tags:
        - test
      summary: sends back text parameter
      operationId: echo
      parameters:
        - in: path
          name: text
          schema:
            type: string
          required: true
          description: text to send back
      responses:
        200:
          description: sends back text parameter value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EchoResponse'
  /test:
    get:
      tags:
        - test
      summary: just test
      operationId: test
      responses:
        200:
          description: test response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestResponse'

components:
  schemas:

    ParametersRequest:
      type: object
      properties:
        expression:
          type: string

    ParametersResponse:
      type: object
      properties:
        expression:
          type: string
        parameters:
          type: array
          items:
            type: string

    ValidationRequest:
      type: object
      properties:
        expression:
          type: string
        parameters:
          $ref:  '#/components/schemas/Parameters'

    ValidationResponse:
      type: object
      properties:
        expression:
          type: string
        parameters:
          $ref:  '#/components/schemas/Parameters'
        value:
          type: boolean

    Parameters:
      type: array
      items:
        $ref: '#/components/schemas/Parameter'

    Parameter:
      type: object
      properties:
        name:
          type: string
        value:
          type: boolean

    TestResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Hello from Spring'
          default: 'Hello visitor'

    EchoResponse:
      type: object
      properties:
        echo:
          type: string

    TimeResponse:
      type: object
      properties:
        time:
          type: string
          format: date-time